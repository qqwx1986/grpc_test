// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCTestClient is the client API for GRPCTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCTestClient interface {
	GetRequest(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
}

type gRPCTestClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCTestClient(cc grpc.ClientConnInterface) GRPCTestClient {
	return &gRPCTestClient{cc}
}

func (c *gRPCTestClient) GetRequest(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/main.GRPCTest/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCTestServer is the server API for GRPCTest service.
// All implementations must embed UnimplementedGRPCTestServer
// for forward compatibility
type GRPCTestServer interface {
	GetRequest(context.Context, *GetReq) (*GetRsp, error)
	mustEmbedUnimplementedGRPCTestServer()
}

// UnimplementedGRPCTestServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCTestServer struct {
}

func (*UnimplementedGRPCTestServer) GetRequest(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (*UnimplementedGRPCTestServer) mustEmbedUnimplementedGRPCTestServer() {}

func RegisterGRPCTestServer(s *grpc.Server, srv GRPCTestServer) {
	s.RegisterService(&_GRPCTest_serviceDesc, srv)
}

func _GRPCTest_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCTestServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.GRPCTest/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCTestServer).GetRequest(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.GRPCTest",
	HandlerType: (*GRPCTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequest",
			Handler:    _GRPCTest_GetRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
